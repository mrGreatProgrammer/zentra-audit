// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Image {
  id        Int      @id @default(autoincrement())
  link      String
  altTxt    String
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?     @map("commentId")
  ourTeam   OurTeam? @relation(fields: [ourTeamId], references: [id])
  ourTeamId Int?     @map("ourTeamId")
  heroSection   HeroSection? @relation(fields: [heroSectionId], references: [id])
  heroSectionId Int?     @map("heroSectionId")
}

model ContactUs {
  id        Int      @id @default(autoincrement())
  username  String
  telephone String
  comment   String
  createdAt DateTime @default(now())
}
model LeaveMessageUs {
  id        Int      @id @default(autoincrement())
  username  String
  telephone String
  comment   String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  avatar    Image[]
  title     String
  txt       String
  comment   String
  createdAt DateTime @default(now())
}

model OurTeam {
  id          Int     @id @default(autoincrement())
  avatar      Image[]
  username    String
  txt         String
  proffession String
}

model HeroSection {
  id          Int     @id @default(autoincrement())
  img      Image[]
  title    String
  txt         String
}



